# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'contrl.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import res_rc
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_ButtonWindow(object):
    def setupUi(self, ButtonWindow):
        ButtonWindow.setObjectName("ButtonWindow")
        ButtonWindow.resize(1225, 854)
        ButtonWindow.setStyleSheet("QFrame{\n"
"    \n"
"    background-color: rgb(37, 74, 55);\n"
"}\n"
"#CaptureButton{\n"
"    background-color: rgb(0, 170, 255);\n"
"}\n"
"#CaptureButton:hover{\n"
"    \n"
"    background-color: rgb(0, 85, 255);\n"
"}\n"
"\n"
"\n"
"#CloseButton{\n"
"    background-color: rgb(0, 132, 97);\n"
"}\n"
"#CloseButton:hover{\n"
"    \n"
"    background-color: rgb(255, 30, 30);\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border:5px;        \n"
"    border-color:rgb(48, 148, 255);\n"
"    background-color: rgb(197, 255, 199);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(ButtonWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(360, 260, 200, 200))
        self.frame.setStyleSheet("\n"
"border-radius:100px\n"
"")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.CloseButton = QtWidgets.QPushButton(self.frame)
        self.CloseButton.setGeometry(QtCore.QRect(75, 75, 50, 50))
        self.CloseButton.setStyleSheet("image: url(:/icon/icon/close.png);\n"
"border-radius:25px")
        self.CloseButton.setText("")
        self.CloseButton.setObjectName("CloseButton")
        self.CarBackButton_2 = QtWidgets.QPushButton(self.frame)
        self.CarBackButton_2.setGeometry(QtCore.QRect(75, 5, 50, 50))
        self.CarBackButton_2.setStyleSheet("image: url(:/icon/icon/home.png);\n"
"\n"
"border-radius:25px\n"
"")
        self.CarBackButton_2.setText("")
        self.CarBackButton_2.setObjectName("CarBackButton_2")
        self.CaptureButton = QtWidgets.QPushButton(self.frame)
        self.CaptureButton.setGeometry(QtCore.QRect(75, 145, 50, 50))
        self.CaptureButton.setStyleSheet("image: url(:/icon/icon/flag.png);\n"
"\n"
"border-radius:25px")
        self.CaptureButton.setText("")
        self.CaptureButton.setObjectName("CaptureButton")
        self.CarBackButton_3 = QtWidgets.QPushButton(self.frame)
        self.CarBackButton_3.setGeometry(QtCore.QRect(145, 75, 50, 50))
        self.CarBackButton_3.setStyleSheet("image: url(:/icon/icon/home.png);\n"
"border-radius:25px")
        self.CarBackButton_3.setText("")
        self.CarBackButton_3.setObjectName("CarBackButton_3")
        self.CarBackButton_1 = QtWidgets.QPushButton(self.frame)
        self.CarBackButton_1.setGeometry(QtCore.QRect(5, 75, 50, 50))
        self.CarBackButton_1.setStyleSheet("image: url(:/icon/icon/home.png);\n"
"\n"
"border-radius:25px")
        self.CarBackButton_1.setText("")
        self.CarBackButton_1.setObjectName("CarBackButton_1")
        ButtonWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(ButtonWindow)


        QtCore.QMetaObject.connectSlotsByName(ButtonWindow)

    def retranslateUi(self, ButtonWindow):
        _translate = QtCore.QCoreApplication.translate
        ButtonWindow.setWindowTitle(_translate("ButtonWindow", "MainWindow"))




class ContrlWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(ContrlWindow, self).__init__()
        self.ui = Ui_ButtonWindow()
        self.ui.setupUi(self)


        self.ui.CloseButton.clicked.connect(self.close)


        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.show()

    def mousePressEvent(self, event):
            if event.button() == QtCore.Qt.LeftButton:
                    self.m_flag = True
                    self.m_Position = event.globalPos() - self.pos()  # 获取鼠标相对窗口的位置
                    event.accept()
                    self.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))  # 更改鼠标图标

    def mouseMoveEvent(self, QMouseEvent):
            if QtCore.Qt.LeftButton and self.m_flag:
                    self.move(QMouseEvent.globalPos() - self.m_Position)  # 更改窗口位置
                    QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
            self.m_flag = False

   # def OpenContrl(self):



if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    win = ContrlWindow()
    sys.exit(app.exec())